h1. Picard: A Micro-framework for node.js

p. If you want to check it out, install "Node":http://nodejs.org and start the sample app with `node app.js`. There are no other dependencies. 

!http://bloglikepattern.com/images/picard.png!

p. Picard uses Haml thanks to creationix's haml-js project.

p. A sample application:

<pre>

  require('./config/env')

  get('/', function(){
    return { text: 'Hello Universe' }
  })

  get('/foo/:bar', function(params){
    return { text: params.bar }
  })

  get('/haml', function(){
    var scope = {
      template: 'index.haml', 
      print_date: function () {
        return (new Date()).toDateString();
      },
      current_user: {
        name: "Jean-Luc Picard",
        bio: "Captain of the USS Enterprise"
      }
    };
    return scope
  })

  get('/json', function(){
    return {
      type: 'application/json',
      body: JSON.stringify( 
        [ { command_1: 'Make it so' },
          { command_2: 'You have the bridge, Number One' } ] )
    }
  })

  get('/redirect', function(){
    return {  headers: { location: '/haml' }, status: 302 }
  })

  post('/order', function(){
    return { text: 'Tea, Earl Grey, Hot' }
  })

  // simulate form params with `curl -d "foo=bar&baz=bat" http://localhost:9900/with_params`
  post('/with_params', function(params){
    return { text: '<h1>' + params.foo + ' ' + params.baz + '</h1>' }
  })

  put('/weapon/:id', function(params){
    return { text: '<p>Phaser with id #' + params.id + ' set to stun</p>' }
  })

  del('/fire/:number', function(params){

    var text = '<p>Borg cube destroyed using ' + params.number + ' photon torpedoes</p>'

    if (  Number(params.number) > 12 )
      text = '<h1>Maximum yield, full spread!</h1>'

    return { text: text }
  })

  get(/\/regex\/(.*)\/(.*)/, function(params){
    return { text: params.captures[0] + ' ' + params.captures[1] }
  })

  get(/\/selective\/(\d+)/, function(params){ // must be a number
    return { text: params.captures[0] }
  })

  get('/this_will_fail', function(){
    foo.bar // foo is undefined
  })

</pre>

h3. Benchmarks

p. The included sinatra_app_for_benchmarks is a Ruby port of the node.js sample_app. According to these benchmarks, the node.js app runs about twice as fast as the Sinatra app on Thin. Below is a sample output of the benchmark script:

<pre>
$ cd sinatra_app_for_benchmarks
$ ruby benchmark.rb

Running Sinatra specs 10 times:

Finished in 0.083148 seconds
Finished in 0.083371 seconds
Finished in 0.112633 seconds
Finished in 0.083442 seconds
Finished in 0.083424 seconds
Finished in 0.0826440000000001 seconds
Finished in 0.083286 seconds
Finished in 0.084136 seconds
Finished in 0.113771 seconds
Finished in 0.08323 seconds
Average time was 0.0893085 seconds

Running Node specs 10 times:

Finished in 0.040487 seconds
Finished in 0.040587 seconds
Finished in 0.041176 seconds
Finished in 0.042727 seconds
Finished in 0.04083 seconds
Finished in 0.040875 seconds
Finished in 0.040128 seconds
Finished in 0.039876 seconds
Finished in 0.040797 seconds
Finished in 0.041551 seconds
Average time was 0.0409034 seconds

Node was 2.18 times faster!
</pre>

p. Specs: MacBook Pro 2 x 2.53 GHz, 4 GB RAM, Ruby v1.8.7 on Thin 1.2.5, node.js v0.1.18