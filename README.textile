h1. Picard: A Micro-framework for node.js

p. If you want to check it out, install "Node":http://nodejs.org and start the sample app with `node app.js`. There are no other dependencies. 

!http://bloglikepattern.com/images/picard.png!

p. Picard uses Haml thanks to creationix's haml-js project.

p. A sample application:

<pre>

  require('./config/env')

  get('/', function(){
    return { text: 'Hello Universe' }
  })

  get('/foo/:bar', function(params){
    return { text: params.bar }
  })

  get('/haml', function(){
    var scope = {
      template: 'index.haml', 
      print_date: function () {
        return (new Date()).toDateString();
      },
      current_user: {
        name: "Jean-Luc Picard",
        bio: "Captain of the USS Enterprise"
      }
    };
    return scope
  })

  get('/json', function(){
    return {
      type: 'application/json',
      body: JSON.stringify( 
        [ { command_1: 'Make it so' },
          { command_2: 'You have the bridge, Number One' } ] )
    }
  })

  get('/redirect', function(){
    return {  headers: { location: '/haml' }, status: 302 }
  })

  post('/order', function(){
    return { text: 'Tea, Earl Grey, Hot' }
  })

  // simulate form params with `curl -d "foo=bar&baz=bat" http://localhost:9900/with_params`
  post('/with_params', function(params){
    return { text: '<h1>' + params.foo + ' ' + params.baz + '</h1>' }
  })

  put('/weapon/:id', function(params){
    return { text: '<p>Phaser with id #' + params.id + ' set to stun</p>' }
  })

  del('/fire/:number', function(params){

    var text = '<p>Borg cube destroyed using ' + params.number + ' photon torpedoes</p>'

    if (  Number(params.number) > 12 )
      text = '<h1>Maximum yield, full spread!</h1>'

    return { text: text }
  })

  get(/\/regex\/(.*)\/(.*)/, function(params){
    return { text: params.captures[0] + ' ' + params.captures[1] }
  })

  get(/\/selective\/(\d+)/, function(params){ // must be a number
    return { text: params.captures[0] }
  })

  get('/this_will_fail', function(){
    foo.bar // foo is undefined
  })

</pre>

h3. Benchmarks

p. The included sinatra_app_for_benchmarks is a Ruby port of the node.js sample_app. According to these benchmarks, the node.js app runs about twice as fast as the Sinatra app on Thin. Below is a sample output of the benchmark script:

<pre>
$ cd sinatra_app_for_benchmarks
$ ruby benchmark.rb

Running Sinatra specs 10 times:

Finished in 0.083148 seconds
Finished in 0.083371 seconds
Finished in 0.112633 seconds
Finished in 0.083442 seconds
Finished in 0.083424 seconds
Finished in 0.082644 seconds
Finished in 0.083286 seconds
Finished in 0.084136 seconds
Finished in 0.113771 seconds
Finished in 0.08323 seconds
Average time was 0.0893085 seconds

Running Picard specs 10 times:

Finished in 0.040487 seconds
Finished in 0.040587 seconds
Finished in 0.041176 seconds
Finished in 0.042727 seconds
Finished in 0.04083 seconds
Finished in 0.040875 seconds
Finished in 0.040128 seconds
Finished in 0.039876 seconds
Finished in 0.040797 seconds
Finished in 0.041551 seconds
Average time was 0.0409034 seconds

Picard was 2.18 times faster!
</pre>

h4. Apache Benchmark Test for Sinatra app:

<pre>
$ ab -n 1000 -c 10 http://127.0.0.1:3000/haml

Server Software:        thin
Server Hostname:        127.0.0.1
Server Port:            3000

Document Path:          /haml
Document Length:        697 bytes

Concurrency Level:      10
Time taken for tests:   10.570 seconds
Complete requests:      1000
Failed requests:        0
Write errors:           0
Total transferred:      835000 bytes
HTML transferred:       697000 bytes
Requests per second:    94.61 [#/sec] (mean)
Time per request:       105.696 [ms] (mean)
Time per request:       10.570 [ms] (mean, across all concurrent requests)
Transfer rate:          77.15 [Kbytes/sec] received

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        0    0   0.3      0       3
Processing:    11  105  19.4     96     202
Waiting:       10   99  24.0     95     178
Total:         11  106  19.4     97     202

Percentage of the requests served within a certain time (ms)
  50%     97
  66%    118
  75%    120
  80%    121
  90%    125
  95%    136
  98%    144
  99%    179
 100%    202 (longest request)   
</pre>

h4. Apache Benchmark Test for Picard app:

<pre>
$ ab -n 1000 -c 10 http://127.0.0.1:9900/haml

Benchmarking 127.0.0.1 (be patient)
Completed 100 requests
Completed 200 requests
Completed 300 requests
Completed 400 requests
Completed 500 requests
Completed 600 requests
Completed 700 requests
Completed 800 requests
Completed 900 requests
Completed 1000 requests
Finished 1000 requests


Server Software:        
Server Hostname:        127.0.0.1
Server Port:            9900

Document Path:          /haml
Document Length:        547 bytes

Concurrency Level:      10
Time taken for tests:   0.880 seconds
Complete requests:      1000
Failed requests:        0
Write errors:           0
Total transferred:      638638 bytes
HTML transferred:       547547 bytes
Requests per second:    1136.19 [#/sec] (mean)
Time per request:       8.801 [ms] (mean)
Time per request:       0.880 [ms] (mean, across all concurrent requests)
Transfer rate:          708.60 [Kbytes/sec] received

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        0    0   0.4      0       3
Processing:     4    8   5.0      8      51
Waiting:        1    6   5.2      6      50
Total:          5    9   5.0      8      51

Percentage of the requests served within a certain time (ms)
  50%      8
  66%      8
  75%      9
  80%      9
  90%     10
  95%     11
  98%     26
  99%     50
 100%     51 (longest request)
</pre>

p. 1136.19 requests per second for Picard verses 94.61 for Sinatra

p. Specs: MacBook Pro 2 x 2.53 GHz, 4 GB RAM, Ruby v1.8.7 on Thin 1.2.5, node.js v0.1.18